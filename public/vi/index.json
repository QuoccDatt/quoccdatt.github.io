[
{
	"uri": "/vi/1-introduce/",
	"title": "Gi∆°ÃÅi thi√™Ã£u",
	"tags": [],
	"description": "",
	"content": "Trong th·ªùi ƒë·∫°i c√¥ng ngh·ªá s·ªë, vi·ªác qu·∫£n l√Ω th√¥ng tin c√° nh√¢n m·ªçi l√∫c m·ªçi n∆°i ƒë√£ tr·ªü th√†nh nhu c·∫ßu thi·∫øt y·∫øu. Workshop n√†y h∆∞·ªõng d·∫´n b·∫°n x√¢y d·ª±ng m·ªôt H·ªá th·ªëng Ghi Ch√∫ C√° Nh√¢n ƒë∆°n gi·∫£n, tri·ªÉn khai tr√™n n·ªÅn ki·∫øn tr√∫c kh√¥ng m√°y ch·ªß (Serverless) s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa Amazon Web Services (AWS).\nM·ª•c ti√™u T·∫°o ·ª©ng d·ª•ng ghi ch√∫ v·ªõi t√≠nh nƒÉng CRUD (Create, Read, Update, Delete). Tri·ªÉn khai ·ª©ng d·ª•ng ho√†n to√†n tr√™n d·ªãch v·ª• AWS, kh√¥ng c·∫ßn m√°y ch·ªß v·∫≠t l√Ω. S·ª≠ d·ª•ng DynamoDB l√†m n∆°i l∆∞u tr·ªØ d·ªØ li·ªáu ghi ch√∫. T·∫°o v√† x·ª≠ l√Ω API qua AWS Lambda k·∫øt h·ª£p API Gateway. Ki·ªÉm tra v√† g·ª≠i y√™u c·∫ßu API b·∫±ng Postman. Gi√°m s√°t log v√† l·ªói th√¥ng qua CloudWatch Logs. L√Ω do ch·ªçn ki·∫øn tr√∫c Serverless Kh√¥ng c·∫ßn qu·∫£n l√Ω h·∫° t·∫ßng v·∫≠t l√Ω hay EC2. T·ª± ƒë·ªông m·ªü r·ªông linh ho·∫°t. T·ªëi ∆∞u chi ph√≠ ‚Äì ch·ªâ tr·∫£ ti·ªÅn khi c√≥ y√™u c·∫ßu. Tri·ªÉn khai nhanh ch√≥ng, d·ªÖ t√≠ch h·ª£p v·ªõi h·ªá sinh th√°i AWS. C√¥ng ngh·ªá s·ª≠ d·ª•ng D·ªãch v·ª• AWS Vai tr√≤ ch√≠nh DynamoDB L∆∞u tr·ªØ d·ªØ li·ªáu ghi ch√∫ d∆∞·ªõi d·∫°ng NoSQL Lambda X·ª≠ l√Ω nghi·ªáp v·ª• th√™m/xem/s·ª≠a/xo√° ghi ch√∫ API Gateway Nh·∫≠n request HTTP v√† chuy·ªÉn ti·∫øp ƒë·∫øn Lambda CloudWatch Theo d√µi log, debug v√† gi√°m s√°t h·ªá th·ªëng IAM Qu·∫£n l√Ω quy·ªÅn truy c·∫≠p ƒë·∫øn c√°c d·ªãch v·ª• AWS üëâ Sau khi ho√†n th√†nh workshop, b·∫°n s·∫Ω n·∫Øm ƒë∆∞·ª£c quy tr√¨nh x√¢y d·ª±ng m·ªôt ·ª©ng d·ª•ng serverless c∆° b·∫£n v√† c√≥ th·ªÉ t√πy bi·∫øn th√™m nhi·ªÅu t√≠nh nƒÉng cho h·ªá th·ªëng ghi ch√∫ c·ªßa ri√™ng m√¨nh.\n"
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.1-postnote/",
	"title": "Ki·ªÉm th·ª≠ t·∫°o ghi ch√∫ (POST)",
	"tags": [],
	"description": "",
	"content": "C√°c b∆∞·ªõc th·ª±c hi·ªán B∆∞·ªõc 1 ‚Äì M·ªü Postman v√† t·∫°o request m·ªõi M·ªü ·ª©ng d·ª•ng Postman. Nh·∫•n New ‚Üí HTTP Request. Ch·ªçn method l√† POST. B∆∞·ªõc 2 ‚Äì C·∫•u h√¨nh request URL:\nhttps://tg9k4ugn87.execute-api.ap-southeast-1.amazonaws.com/dev/notes\nHeaders:\nContent-Type: application/json Body (raw ‚Üí JSON):\n{ \u0026#34;noteId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;First Note\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;This is my first note\u0026#34; } B∆∞·ªõc 3 ‚Äì G·ª≠i request v√† ki·ªÉm tra k·∫øt qu·∫£ Nh·∫•n Send. Ki·ªÉm tra ph·∫£n h·ªìi: { \u0026#34;message\u0026#34;: \u0026#34;Note created successfully!\u0026#34; } B∆∞·ªõc 4 - Ki·ªÉm tra ghi ch√∫ trong DynamoDB Truy c·∫≠p AWS Management Console\nT√¨m d·ªãch v·ª• DynamoDB\nCh·ªçn b·∫£ng NotesTable\nV√†o tab Explore table items\nT√¨m noteId = \u0026ldquo;1\u0026rdquo;\n‚úÖ N·∫øu ghi ch√∫ hi·ªÉn th·ªã ƒë√∫ng, b·∫°n ƒë√£ t·∫°o th√†nh c√¥ng!\n"
},
{
	"uri": "/vi/2-prerequiste/2.1-createdynamodb/",
	"title": "T·∫°o b·∫£ng DynamoDB",
	"tags": [],
	"description": "",
	"content": "C√°c b∆∞·ªõc th·ª±c hi·ªán B∆∞·ªõc 1 - M·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn DynamoDB Truy c·∫≠p AWS Management Console Tr√™n thanh t√¨m ki·∫øm, nh·∫≠p DynamoDB v√† ch·ªçn B∆∞·ªõc 2 - T·∫°o b·∫£ng m·ªõi Nh·∫•n T·∫°o b·∫£ng B∆∞·ªõc 3 - C·∫•u h√¨nh b·∫£ng Nh·∫≠p th√¥ng tin sau:\nT√™n b·∫£ng: NotesTable Kh√≥a ph√¢n v√πng: noteId (ki·ªÉu: String) ‚úÖ M·∫πo: M·ªói ghi ch√∫ s·∫Ω ƒë∆∞·ª£c ƒë·ªãnh danh duy nh·∫•t b·∫±ng noteId. Kh√≥a ch√≠nh n√†y gi√∫p DynamoDB t√¨m ki·∫øm d·ªØ li·ªáu ghi ch√∫ nhanh ch√≥ng.\nB∆∞·ªõc 4 - T√πy ch·ªçn b·ªï sung Gi·ªØ nguy√™n c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh: Kh√¥ng d√πng kh√≥a s·∫Øp x·∫øp Kh√¥ng b·∫≠t TTL K√≠ch ho·∫°t ch·∫ø ƒë·ªô theo y√™u c·∫ßu (kh√¥ng c·∫ßn c·∫•u h√¨nh RCU/WCU) B∆∞·ªõc 5 - T·∫°o b·∫£ng Nh·∫•n T·∫°o b·∫£ng ƒë·ªÉ ho√†n t·∫•t Ch·ªù v√†i gi√¢y ƒë·ªÉ b·∫£ng ƒë∆∞·ª£c kh·ªüi t·∫°o ‚ÑπÔ∏è Sau khi t·∫°o xong, b·∫°n s·∫Ω th·∫•y b·∫£ng NotesTable xu·∫•t hi·ªán trong danh s√°ch b·∫£ng DynamoDB.\n"
},
{
	"uri": "/vi/",
	"title": "T·ªîNG QUAN",
	"tags": [],
	"description": "",
	"content": "T·ªïng quan Trong b√†i lab n√†y, b·∫°n s·∫Ω t√¨m hi·ªÉu c√°ch tri·ªÉn khai m·ªôt h·ªá th·ªëng ghi ch√∫ c√° nh√¢n s·ª≠ d·ª•ng ki·∫øn tr√∫c serverless tr√™n n·ªÅn t·∫£ng AWS. ·ª®ng d·ª•ng cho ph√©p ng∆∞·ªùi d√πng t·∫°o, ch·ªânh s·ª≠a, xem v√† xo√° c√°c ghi ch√∫ c√° nh√¢n th√¥ng qua c√°c API ƒë∆∞·ª£c tri·ªÉn khai b·∫±ng AWS Lambda v√† qu·∫£n l√Ω d·ªØ li·ªáu v·ªõi DynamoDB.\nNg∆∞·ªùi d√πng c√≥ th·ªÉ t∆∞∆°ng t√°c v·ªõi h·ªá th·ªëng th√¥ng qua c√¥ng c·ª• Postman ho·∫∑c c√°c c√¥ng c·ª• HTTP client kh√°c. To√†n b·ªô h·∫° t·∫ßng kh√¥ng c·∫ßn m√°y ch·ªß, gi√∫p ti·∫øt ki·ªám chi ph√≠ v√† d·ªÖ d√†ng m·ªü r·ªông.\nKi·∫øn tr√∫c t·ªïng th·ªÉ N·ªôi dung Gi·ªõi thi·ªáu h·ªá th·ªëng v√† ki·∫øn tr√∫c C√°c b∆∞·ªõc chu·∫©n b·ªã Ki·ªÉm th·ª≠ v·ªõi postman D·ªçn d·∫πp t√†i nguy√™n "
},
{
	"uri": "/vi/2-prerequiste/",
	"title": "C√°c b∆∞·ªõc chu·∫©n b·ªã",
	"tags": [],
	"description": "",
	"content": "T·ªïng quan Trong ph·∫ßn n√†y, b·∫°n s·∫Ω thi·∫øt l·∫≠p c√°c t√†i nguy√™n c·∫ßn thi·∫øt cho h·ªá th·ªëng ghi ch√∫ c√° nh√¢n, bao g·ªìm IAM user, DynamoDB ƒë·ªÉ l∆∞u tr·ªØ ghi ch√∫, Lambda function x·ª≠ l√Ω logic nghi·ªáp v·ª•, API Gateway cung c·∫•p ƒëi·ªÉm truy c·∫≠p API, v√† Postman ƒë·ªÉ ki·ªÉm th·ª≠.\nN·ªôi dung 2.1 T·∫°o DynamoDB Table\n2.2 T·∫°o Lambda Function\n2.3 T·∫°o API Gateway\n2.4 C√†i ƒë·∫∑t Postman\n"
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.2-updatenote/",
	"title": "Ki·ªÉm th·ª≠ c·∫≠p nh·∫≠t ghi ch√∫ (PUT)",
	"tags": [],
	"description": "",
	"content": "C√°c b∆∞·ªõc th·ª±c hi·ªán B∆∞·ªõc 1 - T·∫°o request PUT trong Postman Ch·ªçn method l√† PUT B∆∞·ªõc 2 - C·∫•u h√¨nh request URL:\nhttps://tg9k4ugn87.execute-api.ap-southeast-1.amazonaws.com/dev/notes/1\nHeaders:\nContent-Type: application/json Body:\n{ \u0026#34;noteId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;hahaaaa\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;This is my first note\u0026#34; } B∆∞·ªõc 3 ‚Äì G·ª≠i request v√† ki·ªÉm tra k·∫øt qu·∫£ { \u0026#34;message\u0026#34;: \u0026#34;Note updated successfully!\u0026#34; } B∆∞·ªõc 4 ‚Äì Ki·ªÉm tra l·∫°i trong DynamoDB V√†o b·∫£ng NotesTable\nT√¨m noteId = \u0026ldquo;1\u0026rdquo;\nKi·ªÉm tra xem title ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh \u0026ldquo;hahaaaa\u0026rdquo; "
},
{
	"uri": "/vi/2-prerequiste/2.2-tablecreatelambda/",
	"title": "T·∫°o Lambda Function",
	"tags": [],
	"description": "",
	"content": "H∆∞·ªõng D·∫´n T·∫°o C√°c H√†m Lambda X·ª≠ L√Ω Ghi Ch√∫ B∆∞·ªõc 1 ‚Äì Kh·ªüi T·∫°o Lambda Function ƒêƒÉng nh·∫≠p AWS Management Console T√¨m ki·∫øm v√† ch·ªçn d·ªãch v·ª• Lambda Nh·∫•n T·∫°o h√†m (Create function) B∆∞·ªõc 2 ‚Äì Thi·∫øt L·∫≠p Th√¥ng S·ªë C∆° B·∫£n Ch·ªçn ph∆∞∆°ng th·ª©c Author from scratch ƒêi·ªÅn th√¥ng tin: T√™n h√†m: getNote Runtime: Node.js 18.x Quy·ªÅn h·∫°n: Gi·ªØ nguy√™n c·∫•u h√¨nh m·∫∑c ƒë·ªãnh (t·ª± ƒë·ªông t·∫°o IAM role c∆° b·∫£n) B∆∞·ªõc 3 ‚Äì Tri·ªÉn Khai M√£ X·ª≠ L√Ω Trong tab Code source, thay th·∫ø m√£ m·∫∑c ƒë·ªãnh b·∫±ng ƒëo·∫°n m√£ sau: M√£ ngu·ªìn m·∫´u (Node.js ) createNote : const { DynamoDBClient } = require(\u0026#34;@aws-sdk/client-dynamodb\u0026#34;); const { DynamoDBDocumentClient, PutCommand } = require(\u0026#34;@aws-sdk/lib-dynamodb\u0026#34;); const client = new DynamoDBClient({}); const dynamo = DynamoDBDocumentClient.from(client); exports.handler = async (event) =\u0026gt; { console.log(\u0026#34;Received event:\u0026#34;, JSON.stringify(event)); try { const body = JSON.parse(event.body); const { noteId, title, content } = body; if (!noteId || !title || !content) { return { statusCode: 400, body: JSON.stringify({ error: \u0026#34;Missing noteId, title or content\u0026#34; }) }; } const params = { TableName: \u0026#34;NotesTable\u0026#34;, Item: { noteId, title, content } }; await dynamo.send(new PutCommand(params)); return { statusCode: 200, body: JSON.stringify({ message: \u0026#34;Note created successfully\u0026#34;, noteId }), }; } catch (err) { console.error(\u0026#34;Error:\u0026#34;, err); return { statusCode: 500, body: JSON.stringify({ error: \u0026#39;Failed to create note\u0026#39;, details: err.message }), }; } }; getNote : const { DynamoDBClient } = require(\u0026#34;@aws-sdk/client-dynamodb\u0026#34;); const { DynamoDBDocumentClient, GetCommand } = require(\u0026#34;@aws-sdk/lib-dynamodb\u0026#34;); const client = new DynamoDBClient({}); const dynamo = DynamoDBDocumentClient.from(client); exports.handler = async (event) =\u0026gt; { console.log(\u0026#34;Received event:\u0026#34;, JSON.stringify(event)); try { const noteId = event.pathParameters?.id; if (!noteId) { return { statusCode: 400, body: JSON.stringify({ error: \u0026#34;Missing noteId in pathParameters\u0026#34; }) }; } const params = { TableName: \u0026#34;NotesTable\u0026#34;, Key: { noteId } }; const result = await dynamo.send(new GetCommand(params)); if (!result.Item) { return { statusCode: 404, body: JSON.stringify({ message: \u0026#34;Note not found\u0026#34; }) }; } return { statusCode: 200, body: JSON.stringify(result.Item) }; } catch (err) { console.error(\u0026#34;Error getting note:\u0026#34;, err); return { statusCode: 500, body: JSON.stringify({ error: err.message }) }; } }; updateNote : const { DynamoDBClient } = require(\u0026#34;@aws-sdk/client-dynamodb\u0026#34;); const { DynamoDBDocumentClient, UpdateCommand } = require(\u0026#34;@aws-sdk/lib-dynamodb\u0026#34;); const client = new DynamoDBClient({}); const dynamo = DynamoDBDocumentClient.from(client); exports.handler = async (event) =\u0026gt; { console.log(\u0026#34;Received event:\u0026#34;, JSON.stringify(event)); try { const noteId = event.pathParameters?.id; if (!noteId) { return { statusCode: 400, body: JSON.stringify({ error: \u0026#34;Missing noteId in pathParameters\u0026#34; }) }; } const { title, content } = JSON.parse(event.body); if (!title || !content) { return { statusCode: 400, body: JSON.stringify({ error: \u0026#34;Missing title or content\u0026#34; }) }; } const params = { TableName: \u0026#34;NotesTable\u0026#34;, Key: { noteId }, UpdateExpression: \u0026#34;SET title = :title, content = :content\u0026#34;, ExpressionAttributeValues: { \u0026#34;:title\u0026#34;: title, \u0026#34;:content\u0026#34;: content }, ReturnValues: \u0026#34;ALL_NEW\u0026#34; }; const result = await dynamo.send(new UpdateCommand(params)); return { statusCode: 200, body: JSON.stringify(result.Attributes) }; } catch (err) { console.error(\u0026#34;Error updating note:\u0026#34;, err); return { statusCode: 500, body: JSON.stringify({ error: err.message }) }; } }; deleteNote : const { DynamoDBClient } = require(\u0026#34;@aws-sdk/client-dynamodb\u0026#34;); const { DynamoDBDocumentClient, DeleteCommand } = require(\u0026#34;@aws-sdk/lib-dynamodb\u0026#34;); const client = new DynamoDBClient({}); const dynamo = DynamoDBDocumentClient.from(client); exports.handler = async (event) =\u0026gt; { console.log(\u0026#34;Received event:\u0026#34;, JSON.stringify(event)); try { const noteId = event.pathParameters?.id; if (!noteId) { return { statusCode: 400, body: JSON.stringify({ error: \u0026#34;Missing noteId in pathParameters\u0026#34; }) }; } const params = { TableName: \u0026#34;NotesTable\u0026#34;, Key: { noteId } }; await dynamo.send(new DeleteCommand(params)); return { statusCode: 200, body: JSON.stringify({ message: \u0026#34;Note deleted\u0026#34; }) }; } catch (err) { console.error(\u0026#34;Error deleting note:\u0026#34;, err); return { statusCode: 500, body: JSON.stringify({ error: err.message }) }; } }; "
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.3-deletenote/",
	"title": "Ki·ªÉm th·ª≠ xo√° ghi ch√∫ (DELETE)",
	"tags": [],
	"description": "",
	"content": " 3.3 ‚Äì Ki·ªÉm th·ª≠ xo√° ghi ch√∫ (DELETE) B∆∞·ªõc 1 ‚Äì T·∫°o request DELETE trong Postman\nCh·ªçn method l√† DELETE.\nB∆∞·ªõc 2 ‚Äì C·∫•u h√¨nh request\nURL:\nhttps://tg9k4ugn87.execute-api.ap-southeast-1.amazonaws.com/dev/notes/1\nB∆∞·ªõc 3 ‚Äì G·ª≠i request v√† ki·ªÉm tra ph·∫£n h·ªìi\n{ \u0026#34;message\u0026#34;: \u0026#34;Note deleted successfully!\u0026#34; } B∆∞·ªõc 4 - Ki·ªÉm tra l·∫°i trong DynamoDB\nV√†o b·∫£ng NotesTable.\nT√¨m noteId = \u0026ldquo;1\u0026rdquo;.\nN·∫øu kh√¥ng c√≤n d·ªØ li·ªáu, ghi ch√∫ ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng. "
},
{
	"uri": "/vi/2-prerequiste/2.3-functioncreateapi/",
	"title": "T·∫°o API Gateway NotesAPI",
	"tags": [],
	"description": "",
	"content": "üåü T·ªïng quan Ph·∫ßn n√†y h∆∞·ªõng d·∫´n t·∫°o API Gateway t√™n NotesAPI v·ªõi c√°c endpoint RESTful ƒë·ªÉ qu·∫£n l√Ω ghi ch√∫, t√≠ch h·ª£p v·ªõi c√°c Lambda Function ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥.\nüõ†Ô∏è C√°c b∆∞·ªõc tri·ªÉn khai B∆∞·ªõc 1: Kh·ªüi t·∫°o API Gateway ƒêƒÉng nh·∫≠p AWS Management Console\nT√¨m v√† ch·ªçn d·ªãch v·ª• API Gateway\nNh·∫•n Create API\nCh·ªçn:\nLo·∫°i API: REST API (m·ª•c \u0026ldquo;Build\u0026rdquo;) Nh·∫•n Build Nh·∫≠p th√¥ng tin:\nT√™n API: NotesAPI M√¥ t·∫£: API qu·∫£n l√Ω ghi ch√∫ Endpoint Type: Gi·ªØ nguy√™n Regional Nh·∫•n Create API B∆∞·ªõc 2: T·∫°o Resource v√† Method T·∫°o Resource ch√≠nh:\nCh·ªçn Actions ‚Üí Create Resource Thi·∫øt l·∫≠p: Resource Name: notes Resource Path: /notes Nh·∫•n Create Resource T·∫°o Resource con:\nCh·ªçn resource /notes v·ª´a t·∫°o Ch·ªçn Actions ‚Üí Create Resource Thi·∫øt l·∫≠p: Resource Name: {id} Resource Path: /{id} Nh·∫•n Create Resource T·∫°o Methods:\nPOST (t·∫°o ghi ch√∫):\nCh·ªçn resource /notes ‚Üí Create Method ‚Üí ch·ªçn POST C·∫•u h√¨nh: Integration type: Lambda Function Lambda Region: Ch·ªçn region c·ªßa b·∫°n Lambda Function: createNote Nh·∫•n Save ‚Üí X√°c nh·∫≠n c·∫•p quy·ªÅn GET/PUT/DELETE (xem/c·∫≠p nh·∫≠t/x√≥a ghi ch√∫):\nL·∫∑p l·∫°i quy tr√¨nh cho resource /{id} v·ªõi: GET ‚Üí getNote PUT ‚Üí updateNote DELETE ‚Üí deleteNote B∆∞·ªõc 3: Tri·ªÉn khai API Ch·ªçn Actions ‚Üí Deploy API C·∫•u h√¨nh: Deployment stage: [New Stage] Stage name: dev M√¥ t·∫£: M√¥i tr∆∞·ªùng production Nh·∫•n Deploy B∆∞·ªõc 4: Ki·ªÉm tra Endpoint Sau khi tri·ªÉn khai, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c Invoke URL c√≥ d·∫°ng: https://abc123.execute-api.region.amazonaws.com/dev\nC√°c endpoint ho√†n ch·ªânh:\nPOST https://[your-url]/dev/notes\nGET https://[your-url]/dev/notes/{id}\nPUT https://[your-url]/dev/notes/{id}\nDELETE https://[your-url]/dev/notes/{id}\n"
},
{
	"uri": "/vi/3-accessibilitytoinstances/",
	"title": "Ki·ªÉm th·ª≠ v·ªõi postman",
	"tags": [],
	"description": "",
	"content": "T·ªïng quan Sau khi tri·ªÉn khai th√†nh c√¥ng Lambda Function v√† API Gateway, b·∫°n s·∫Ω s·ª≠ d·ª•ng c√¥ng c·ª• Postman ƒë·ªÉ ki·ªÉm th·ª≠ c√°c t√≠nh nƒÉng ch√≠nh c·ªßa h·ªá th·ªëng ghi ch√∫ c√° nh√¢n. Th√¥ng qua Postman, b·∫°n c√≥ th·ªÉ g·ª≠i c√°c HTTP request (nh∆∞ POST, PUT, DELETE) ƒë·∫øn API Gateway ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi h·ªá th·ªëng ghi ch√∫.\nN·ªôi dung 3.1 ‚Äì Ki·ªÉm th·ª≠ t·∫°o ghi ch√∫ (POST) 3.2 ‚Äì Ki·ªÉm th·ª≠ c·∫≠p nh·∫≠t ghi ch√∫ (PUT) 3.3 ‚Äì Ki·ªÉm th·ª≠ xo√° ghi ch√∫ (DELETE) "
},
{
	"uri": "/vi/2-prerequiste/2.4-gatewayinstallpostman/",
	"title": "C√†i ƒë·∫∑t Postman",
	"tags": [],
	"description": "",
	"content": "C√†i ƒë·∫∑t Postman Trong b∆∞·ªõc n√†y, ch√∫ng ta s·∫Ω ti·∫øn h√†nh t·∫£i v√† c√†i ƒë·∫∑t Postman - c√¥ng c·ª• d√πng ƒë·ªÉ ki·ªÉm th·ª≠ c√°c API m√† b·∫°n ƒë√£ tri·ªÉn khai trong workshop.\nTruy c·∫≠p v√†o trang ch·ªß Postman\nCh·ªçn phi√™n b·∫£n ph√π h·ª£p v·ªõi h·ªá ƒëi·ªÅu h√†nh c·ªßa b·∫°n:\nWindows macOS Linux Sau khi t·∫£i v·ªÅ, ti·∫øn h√†nh c√†i ƒë·∫∑t:\nTr√™n Windows: Ch·∫°y file .exe v√† l√†m theo h∆∞·ªõng d·∫´n Tr√™n macOS: K√©o bi·ªÉu t∆∞·ª£ng Postman v√†o th∆∞ m·ª•c Applications M·ªü Postman sau khi c√†i ƒë·∫∑t th√†nh c√¥ng\nB·∫°n c√≥ th·ªÉ:\nƒêƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n Postman Ho·∫∑c ch·ªçn Skip and go to the app ƒë·ªÉ s·ª≠ d·ª•ng ngay Giao di·ªán ch√≠nh c·ªßa Postman:\nKi·ªÉm th·ª≠ API v·ªõi Postman Sau khi c√†i ƒë·∫∑t, b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu ki·ªÉm th·ª≠ c√°c endpoint:\nMethod Endpoint Ch·ª©c nƒÉng POST /notes T·∫°o ghi ch√∫ m·ªõi GET /notes/{id} L·∫•y ghi ch√∫ theo ID PUT /notes/{id} C·∫≠p nh·∫≠t ghi ch√∫ DELETE /notes/{id} X√≥a ghi ch√∫ L∆∞u √Ω quan tr·ªçng:\nTh√™m header Content-Type: application/json ƒê·ªëi v·ªõi API c·∫ßn x√°c th·ª±c, th√™m header x-api-key v·ªõi API Key t·ª´ API Gateway üí° M·∫πo: B·∫°n c√≥ th·ªÉ l∆∞u c√°c request th√†nh Collection ƒë·ªÉ s·ª≠ d·ª•ng l·∫°i sau n√†y\nB√¢y gi·ªù b·∫°n ƒë√£ s·∫µn s√†ng ƒë·ªÉ ki·ªÉm th·ª≠ h·ªá th·ªëng ghi ch√∫ c√° nh√¢n c·ªßa m√¨nh b·∫±ng Postman!\n"
},
{
	"uri": "/vi/4-cleanup/",
	"title": "D·ªçn d·∫πp t√†i nguy√™n AWS",
	"tags": [],
	"description": "",
	"content": "C√°c b∆∞·ªõc th·ªçn d·∫πp t√†i nguy√™n B∆∞·ªõc 1 - X√≥a API Gateway Truy c·∫≠p AWS Management Console T√¨m d·ªãch v·ª• API Gateway Ch·ªçn API note-api Nh·∫•n Actions ‚Üí Delete X√°c nh·∫≠n x√≥a B∆∞·ªõc 2 - X√≥a Lambda Functions Truy c·∫≠p d·ªãch v·ª• Lambda Ch·ªçn t·ª´ng function: createNote getNote updateNote deleteNote Nh·∫•n Actions ‚Üí Delete X√°c nh·∫≠n x√≥a t·ª´ng function B∆∞·ªõc 3 - X√≥a b·∫£ng DynamoDB Truy c·∫≠p d·ªãch v·ª• DynamoDB Ch·ªçn b·∫£ng NotesTable Nh·∫•n Delete table Nh·∫≠p NotesTable ƒë·ªÉ x√°c nh·∫≠n Nh·∫•n Delete B∆∞·ªõc 4 - X√≥a CloudWatch Logs Truy c·∫≠p d·ªãch v·ª• CloudWatch Ch·ªçn Log groups T√¨m v√† x√≥a c√°c log group li√™n quan: /aws/lambda/createNote /aws/lambda/getNote /aws/lambda/updateNote /aws/lambda/deleteNote Nh·∫•n Actions ‚Üí Delete log group(s) B∆∞·ªõc 5 - X√≥a IAM Roles (n·∫øu c√≥) Truy c·∫≠p d·ªãch v·ª• IAM Ch·ªçn Roles T√¨m v√† x√≥a c√°c role: LambdaExecutionRole APIGatewayToLambdaRole Nh·∫•n Delete role ‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:\nƒê·∫£m b·∫£o ƒë√£ sao l∆∞u d·ªØ li·ªáu quan tr·ªçng tr∆∞·ªõc khi x√≥a C√°c t√†i nguy√™n ƒë√£ x√≥a kh√¥ng th·ªÉ kh√¥i ph·ª•c Ki·ªÉm tra k·ªπ tr∆∞·ªõc khi x√°c nh·∫≠n x√≥a "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]